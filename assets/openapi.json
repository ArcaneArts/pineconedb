{
  "openapi": "3.0.2",
  "info": {
    "title": "Pinecone API",
    "description": "Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.",
    "contact": {
      "name": "Dart Pinecone Client",
      "url": "https://pub.dev/packages/pinecone"
    },
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "https://controller.{environment}.pinecone.io",
      "variables": {
        "environment": {
          "default": "us-east1-gcp",
          "description": "The regional deployment to use. Must match API key."
        }
      }
    }
  ],
  "externalDocs": {
    "url": "https://docs.pinecone.io/",
    "description": "The official Pinecone API documentation"
  },
  "tags": [
    {
      "name": "Index Operations",
      "description": "Endpoints for manipulating indexes"
    },
    {
      "name": "Vector Operations",
      "description": "Endpoints for manipulating vectors"
    }
  ],
  "paths": {
    "/collections": {
      "get": {
        "tags": [
          "Index Operations"
        ],
        "summary": "List collections",
        "description": "This operation returns a list of your Pinecone collections.",
        "operationId": "list_collections",
        "responses": {
          "200": {
            "description": "This operation returns a list of all the collections in your current project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Create collection",
        "description": "This operation creates a Pinecone collection.",
        "operationId": "create_collection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionDefinition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The collection has been successfully created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "A collection with the name provided already exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/collections/{collectionName}": {
      "get": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Describe collection",
        "description": "Get a description of a collection.",
        "operationId": "describe_collection",
        "parameters": [
          {
            "name": "collectionName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a list of all the collections in your current project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/CollectionNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Delete Collection",
        "description": "This operation deletes an existing collection.",
        "operationId": "delete_collection",
        "parameters": [
          {
            "name": "collectionName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The collection has been successfully deleted."
          },
          "404": {
            "$ref": "#/components/responses/CollectionNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/databases": {
      "get": {
        "tags": [
          "Index Operations"
        ],
        "summary": "List indexes",
        "description": "This operation returns a list of your Pinecone indexes.",
        "operationId": "list_indexes",
        "responses": {
          "200": {
            "description": "This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Create index",
        "description": "This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.",
        "operationId": "create_index",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexDefinition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The collection has been successfully created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "Index of given name already exists.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/databases/{indexName}": {
      "get": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Describe index",
        "description": "Get a description of an index.",
        "operationId": "describe_index",
        "parameters": [
          {
            "name": "indexName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This operation returns a list of all the collections in your current project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Index"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Delete Index",
        "description": "This operation deletes an existing index.",
        "operationId": "delete_index",
        "parameters": [
          {
            "name": "indexName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The index has been successfully deleted."
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "patch": {
        "tags": [
          "Index Operations"
        ],
        "summary": "Configure index",
        "description": "This operation specifies the pod type and number of replicas for an index.",
        "operationId": "configure_index",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexConfiguration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The index has been successfully updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/describe_index_stats": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Describe Index Stats",
        "description": "The `DescribeIndexStats` operation returns statistics about the index's contents, including the vector count per namespace and the number of dimensions.",
        "operationId": "DescribeIndexStats",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DescribeIndexStatsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeIndexStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp",
              "enum": [
                "us-west1-gcp",
                "us-west4-gcp",
                "us-central1-gcp",
                "us-east1-gcp",
                "us-east4-gcp",
                "eu-west1-gcp",
                "us-east1-aws"
              ]
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Query",
        "description": "The `Query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.",
        "operationId": "Query",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vectors/delete": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Delete",
        "description": "The `Delete` operation deletes vectors, by id, from a single namespace. You can delete items by their id, from a single namespace.",
        "operationId": "Delete",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vectors/fetch": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Fetch",
        "description": "The `Fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.",
        "operationId": "Fetch",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vectors/update": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Fetch",
        "description": "The `Update` operation updates vector in a namespace. If a value is included, it will overwrite the previous value. If a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.",
        "operationId": "Update",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vectors/upsert": {
      "servers": [
        {
          "url": "https://{index_name}-{project_id}.svc.{environment}.pinecone.io",
          "variables": {
            "index_name": {
              "default": "example",
              "description": "The name of the index being manipulated"
            },
            "project_id": {
              "default": "abcd1234",
              "description": "The project being manipulated"
            },
            "environment": {
              "description": "The cloud environment",
              "default": "us-east1-gcp"
            }
          }
        }
      ],
      "post": {
        "tags": [
          "Vector Operations"
        ],
        "summary": "Upsert",
        "description": "The Upsert operation writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.",
        "operationId": "Upsert",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "BadRequest": {
        "description": "Quota exceeded, or invalid parameters.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "CollectionNotFound": {
        "description": "Collection not found.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal error. Can be caused by invalid parameters.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Api-Key"
      }
    },
    "schemas": {
      "CollectionDefinition": {
        "type": "object",
        "description": "The collection to create",
        "required": [
          "name",
          "source"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the collection to be created."
          },
          "source": {
            "type": "string",
            "description": "The name of the source index to be used as the source for the collection."
          }
        }
      },
      "Collection": {
        "type": "object",
        "description": "Object container for collection information",
        "required": [
          "name",
          "dimension",
          "status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the collection"
          },
          "dimension": {
            "type": "integer",
            "format": "int64",
            "description": "The dimension of the vectors within the collection."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the collection in bytes."
          },
          "status": {
            "type": "string",
            "description": "The status of the collection."
          }
        }
      },
      "IndexState": {
        "type": "string",
        "description": "The current status of a index.",
        "format": "IndexState",
        "nullable": false,
        "example": "Ready",
        "enum": [
          "Initializing",
          "ScalingUp",
          "ScalingDown",
          "Terminating",
          "Ready"
        ]
      },
      "IndexMetric": {
        "type": "string",
        "description": "The vector similarity metric of the index",
        "enum": [
          "euclidean",
          "cosine",
          "dotproduct"
        ]
      },
      "IndexMetadataConfig": {
        "type": "object",
        "description": "Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed.",
        "properties": {
          "indexed": {
            "type": "array",
            "minLength": 0,
            "items": {
              "type": "string"
            },
            "example": [
              "hello"
            ]
          }
        }
      },
      "IndexDefinition": {
        "type": "object",
        "description": "The index to create",
        "required": [
          "name",
          "dimension"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the index to be created. The maximum length is 45 characters."
          },
          "dimension": {
            "type": "integer",
            "description": "The dimensions of the vectors to be inserted in the index"
          },
          "metric": {
            "$ref": "#/components/schemas/IndexMetric",
            "description": "The distance metric to be used for similarity search: euclidean, cosine, or dotproduct."
          },
          "pods": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "default": 1,
            "description": "The number of pods for the index to use,including replicas."
          },
          "replicas": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "default": 1,
            "description": "The number of replicas. Replicas duplicate your index. They provide higher availability and throughput."
          },
          "pod_type": {
            "type": "string",
            "nullable": true,
            "description": "The type of pod to use. One of s1, p1, or p2 appended with . and one of x1, x2, x4, or x8."
          },
          "metadata_config": {
            "$ref": "#/components/schemas/IndexMetadataConfig",
            "description": "Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed."
          },
          "source_collection": {
            "type": "string",
            "description": "The name of the collection to create an index from"
          }
        }
      },
      "IndexConfiguration": {
        "type": "object",
        "description": "This operation specifies the pod type and number of replicas for an index.",
        "properties": {
          "replicas": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "default": 1,
            "description": "The desired number of replicas for the index."
          },
          "pod_type": {
            "type": "string",
            "nullable": true,
            "description": "The new pod type for the index. One of s1, p1, or p2 appended with . and one of x1, x2, x4, or x8."
          }
        }
      },
      "IndexDatabase": {
        "type": "object",
        "description": "Object container for index database information",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the index"
          },
          "metric": {
            "$ref": "#/components/schemas/IndexMetric",
            "description": "The distance metric to be used for similarity search"
          },
          "dimension": {
            "type": "integer",
            "description": "The dimensions of the vectors to be inserted in the index"
          },
          "replicas": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The number of replicas"
          },
          "shards": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The number of shares"
          },
          "pods": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "description": "The number of pods"
          },
          "pod_type": {
            "type": "string",
            "nullable": true,
            "description": "The type of pods"
          }
        }
      },
      "IndexStatus": {
        "type": "object",
        "description": "The status of an index.",
        "properties": {
          "host": {
            "type": "string",
            "format": "Hostname",
            "description": "The URL of the host for this index"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "description": "The port of this index"
          },
          "state": {
            "$ref": "#/components/schemas/IndexState",
            "description": "The index state"
          },
          "ready": {
            "type": "boolean",
            "description": "Indicator of index readiness"
          }
        }
      },
      "Index": {
        "type": "object",
        "description": "Configuration information and deployment status of the index",
        "properties": {
          "database": {
            "$ref": "#/components/schemas/IndexDatabase",
            "description": "Summary of index properties and metadata"
          },
          "status": {
            "$ref": "#/components/schemas/IndexStatus",
            "description": "The status of the index."
          }
        }
      },
      "VectorMetadata": {
        "type": "object",
        "description": "The vector meta data",
        "additionalProperties": {},
        "example": {
          "hello": "alpha"
        }
      },
      "SparseVectorData": {
        "type": "object",
        "description": "Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.",
        "required": [
          "indices",
          "values"
        ],
        "properties": {
          "indices": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The indices of the sparse data."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The corresponding values of the sparse data, which must be the same length as the indices."
          }
        }
      },
      "DescribeIndexStatsRequest": {
        "type": "object",
        "description": "This operation returns statistics about the index's contents, including the vector count per namespace and the number of dimensions.",
        "properties": {
          "filter": {
            "$type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "If this parameter is present, the operation only returns statistics for vectors that satisfy the filter."
          }
        }
      },
      "IndexNamespaceStats": {
        "type": "object",
        "description": "The index namespace statistics",
        "properties": {
          "vectorCount": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of vectors in namespace"
          }
        }
      },
      "DescribeIndexStatsResponse": {
        "type": "object",
        "description": "Response container index statistics",
        "properties": {
          "namespaces": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndexNamespaceStats"
            },
            "description": "A mapping for each namespace in the index from the namespace name to a summary of its contents. If a metadata filter expression is present, the summary will reflect only vectors matching that expression."
          },
          "dimension": {
            "type": "integer",
            "description": "The dimension of the indexed vectors."
          },
          "indexFullness": {
            "type": "number",
            "format": "float",
            "description": "The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%."
          },
          "totalVectorCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of vectors in the index, regardless of whether a metadata filter expression was passed."
          }
        }
      },
      "QueryRequest": {
        "type": "object",
        "description": "Perform a query on an index",
        "required": [
          "topK"
        ],
        "properties": {
          "namespace": {
            "type": "string",
            "description": "The namespace to query."
          },
          "topK": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 10000,
            "description": "The number of results to return for each query."
          },
          "filter": {
            "$type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "The filter to apply. You can use vector metadata to limit your search."
          },
          "includeValues": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether vector values are included in the response."
          },
          "includeMetadata": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether metadata is included in the response as well as the ids."
          },
          "vector": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The query vector. This should be the same length as the dimension of the index being queried. Each query() request can contain only one of the parameters id or vector."
          },
          "sparseVector": {
            "$ref": "#/components/schemas/SparseVectorData",
            "description": "Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length."
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the vector to be used as a query vector. Each query() request can contain only one of the parameters queries, vector, or id."
          }
        }
      },
      "QueryMatch": {
        "type": "object",
        "description": "The matches for the vectors.",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the vector's unique id."
          },
          "score": {
            "type": "number",
            "format": "float",
            "description": "This is a measure of similarity between this vector and the query vector. The higher the score, the more they are similar."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "This is the vector data, if it is requested."
          },
          "sparseValues": {
            "$ref": "#/components/schemas/SparseVectorData",
            "description": "Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length."
          },
          "metadata": {
            "$ref": "#/components/schemas/VectorMetadata",
            "description": "This is the metadata, if it is requested."
          }
        }
      },
      "QueryResponse": {
        "type": "object",
        "description": "The response to a query request",
        "properties": {
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryMatch"
            },
            "description": "The list of matching vectors for query"
          },
          "namespace": {
            "type": "string",
            "description": "The namespace for the vectors."
          }
        }
      },
      "DeleteRequest": {
        "type": "object",
        "description": "Deletes vectors, by id, from a single namespace.",
        "properties": {
          "ids": {
            "type": "array",
            "maxLength": 1000,
            "items": {
              "type": "string"
            },
            "description": "Vectors to delete."
          },
          "deleteAll": {
            "type": "boolean",
            "default": false,
            "description": "This indicates that all vectors in the index namespace should be deleted."
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "description": "The namespace to delete vectors from, if applicable."
          },
          "filter": {
            "$type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive with specifying ids to delete in the ids param or using delete_all=True."
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "description": "The response of the delete request",
        "properties": {}
      },
      "FetchRequest": {
        "type": "object",
        "description": "Operation looks up and returns vectors, by id, from a single namespace.",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "maxLength": 1000,
            "items": {
              "type": "string"
            },
            "description": "The vector IDs to fetch. Does not accept values containing spaces."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace of the vectors."
          }
        }
      },
      "FetchResponse": {
        "type": "object",
        "description": "The response to a fetch request",
        "properties": {
          "vectors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            },
            "description": "Vectors returned by the fetch request."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace of the vectors."
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "description": "A vector update request",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The vector's unique ID"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The vector values"
          },
          "sparseValues": {
            "$ref": "#/components/schemas/SparseVectorData",
            "description": "Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length."
          },
          "setMetadata": {
            "$ref": "#/components/schemas/VectorMetadata",
            "description": "Metadata to set for the vector."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace containing the vector to update."
          }
        }
      },
      "UpdateResponse": {
        "type": "object",
        "description": "Response from update request",
        "properties": {}
      },
      "UpsertVector": {
        "type": "object",
        "description": "The vector object to upsert",
        "required": [
          "id",
          "values"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the vector's unique id."
          },
          "values": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "This is the vector data included in the request."
          },
          "sparseValues": {
            "$ref": "#/components/schemas/SparseVectorData",
            "description": "Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length."
          },
          "metadata": {
            "$ref": "#/components/schemas/VectorMetadata",
            "description": "This is the metadata included in the request."
          }
        }
      },
      "UpsertRequest": {
        "type": "object",
        "description": "This operation writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.",
        "required": [
          "vectors"
        ],
        "properties": {
          "vectors": {
            "type": "array",
            "maxLength": 100,
            "items": {
              "$ref": "#/components/schemas/UpsertVector"
            },
            "description": "An array containing the vectors to upsert. Recommended batch limit is 100 vectors."
          },
          "namespace": {
            "type": "string",
            "description": "This is the namespace name where you upsert vectors."
          }
        }
      },
      "UpsertResponse": {
        "type": "object",
        "description": "The response of update request",
        "properties": {
          "upsertedCount": {
            "type": "integer",
            "format": "int64",
            "description": "The number of vectors upserted."
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}